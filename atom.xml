<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Cryblo&#39;s blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-04-24T08:16:26.838Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Cryblo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://example.com/2021/04/24/%E5%81%9A%E9%A2%98/"/>
    <id>http://example.com/2021/04/24/%E5%81%9A%E9%A2%98/</id>
    <published>2021-04-24T07:17:14.591Z</published>
    <updated>2021-04-24T08:16:26.838Z</updated>
    
    <content type="html"><![CDATA[<h2 id="极客大挑战-2019-EasySQL"><a href="#极客大挑战-2019-EasySQL" class="headerlink" title="[极客大挑战 2019]EasySQL"></a>[极客大挑战 2019]EasySQL</h2><ol><li>首先输入1‘，报错</li></ol><p><img src="C:\Users\DELL\AppData\Roaming\Typora\typora-user-images\image-20210424161250689.png" alt="image-20210424161250689"></p><p>确定是字符型注入</p><ol start="2"><li><p>输入万能密码：1’ or ‘1’=’1</p><p>登录成功</p><p><img src="C:\Users\DELL\AppData\Roaming\Typora\typora-user-images\image-20210424161612660.png" alt="image-20210424161612660"></p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;极客大挑战-2019-EasySQL&quot;&gt;&lt;a href=&quot;#极客大挑战-2019-EasySQL&quot; class=&quot;headerlink&quot; title=&quot;[极客大挑战 2019]EasySQL&quot;&gt;&lt;/a&gt;[极客大挑战 2019]EasySQL&lt;/h2&gt;&lt;ol&gt;
&lt;l</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Markdown</title>
    <link href="http://example.com/2021/04/20/Markdown/"/>
    <id>http://example.com/2021/04/20/Markdown/</id>
    <published>2021-04-19T16:00:00.000Z</published>
    <updated>2021-04-24T06:54:00.074Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h2><p>  Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。</p><p>  Markdown 语言在 2004 由约翰·格鲁伯（英语：John Gruber）创建。</p><p>  Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。</p><p>  Markdown 编写的文档后缀为 .md, .markdown。</p><p>推荐工具：<a href="https://typora.io/" title="点击进入Typora官网">Typora</a></p><h3 id="1-标题"><a href="#1-标题" class="headerlink" title="1.标题"></a>1.标题</h3><p>使用 # 号可表示 1-6 级标题，一级标题对应一个 # 号，二级标题对应两个 # 号，以此类推。    </p><p>语法： </p><p># 这是一级标题<br>## 这是二级标题<br>### 这是三级标题   </p><p>显示效果：</p><h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><h3 id="2-段落格式"><a href="#2-段落格式" class="headerlink" title="2.段落格式"></a>2.段落格式</h3><p>Markdown 段落没有特殊的格式，直接编写文字就好，段落的换行是使用两个以上空格加上回车。<br>当然也可以在段落后面使用一个空行来表示重新开始一个段落。  </p><h4 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h4><p>Markdown 可以使用以下几种字体:  </p><p>*斜体文本*             <em>斜体文本</em>      </p><p>_斜体文本_             <em>斜体文本</em>  </p><p>**粗体文本**          <strong>粗体文本</strong>  </p><p>__粗体文本__           <strong>粗体文本</strong>  </p><p>*<strong>粗斜体文本***      *</strong>粗斜体文本***  </p><p>___粗斜体文本___       <strong><em>粗斜体文本</em></strong>  </p><h3 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h3><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：  </p><p>语法：  </p><p>***</p><p>* * *</p><p>*****</p><p>- - -</p><p>-———<br>显示效果：  </p><hr><hr><hr><hr><hr><h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><p>如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线 ~~ 即可，实例如下： </p><p>RUNOOB.COM  </p><p>GOOGLE.COM  </p><p>~~BAIDU.COM~~  </p><p>显示效果如下：  </p><p>RUNOOB.COM</p><p>GOOGLE.COM</p><p><del>BAIDU.COM</del>   </p><h3 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h3><p>下划线可以通过 HTML 的 <code>&lt;u&gt; </code>标签来实现：</p><p>语法：<br>&lt;u&gt;带下划线文本</u><br>显示效果如下：<br><u>带下划线文本</u> </p><h3 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h3><p>脚注是对文本的补充说明。</p><p>Markdown 脚注的格式如下:</p><p>[^要注明的文本]  </p><p>以下实例演示了脚注的用法：</p><p>创建脚注格式类似这样 <a href="%E8%BF%99%E6%98%AF%E4%B8%80%E4%B8%AA%E8%84%9A%E6%B3%A8%E3%80%82">^JIAOZHU</a>。</p><h3 id="Markdown-列表"><a href="#Markdown-列表" class="headerlink" title="Markdown 列表"></a>Markdown 列表</h3><p>Markdown 支持有序列表和无序列表。</p><p>无序列表使用星号(*)、加号(+)或是减号(-)作为列表标记，这些标记后面要添加一个空格，然后再填写内容：<br>语法：  </p><p><code>* 第一项</code>  </p><p><code>* 第二项</code>  </p><p><code>* 第三项</code></p><p><code>+ 第一项</code>  </p><p><code>+ 第二项</code>  </p><p><code>+ 第三项</code></p><p><code>- 第一项</code>  </p><p><code>- 第二项</code>  </p><p><code>- 第三项</code><br>显示效果：  </p><ul><li><p>第一项  </p></li><li><p>第二项</p></li><li><p>第三项</p></li></ul><ul><li><p>第一项</p></li><li><p>第二项 </p></li><li><p>第三项</p></li></ul><ul><li><p>第一项  </p></li><li><p>第二项 </p></li><li><p>第三项  </p></li></ul><p>有序列表使用数字并加上 . 号来表示，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 第一项</span><br><span class="line">2. 第二项</span><br><span class="line">3. 第三项</span><br></pre></td></tr></table></figure><h3 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h3><p>列表嵌套只需在子列表中的选项前面添加四个空格即可：  </p><h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><pre><code>1.字母·数字·下划线，不能以数字打头2.用下划线代替空格3.避免使用Python关键字和函数名4.拼写</code></pre><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><pre><code>1.首字母大写：xx.title（）2.全部大写：xx.upper（）3.小写：xx.lower（）4.合并：A. string1 + &quot; &quot; +string2              B. &quot;xxx&quot; + string + &quot;xxx&quot;5.制表符：\t6.换行符：\n7.换行+制表：\n\t8.删除空白        暂时，需存回变量        （1）末尾空白：xx.rstrip（）   暂时，需存回变量        （2）开头：lstrip（）        （3）两端：strip（）</code></pre><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">form = [<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>]</span><br></pre></td></tr></table></figure><pre><code>1.访问：print（form[0]）               索引从0开始2.索引‘ -1 ’可以访问最后一个列表元素 以此类推</code></pre><h2 id="修改，添加，删除元素"><a href="#修改，添加，删除元素" class="headerlink" title="修改，添加，删除元素"></a>修改，添加，删除元素</h2><pre><code>1.修改</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">form[<span class="number">0</span>] = <span class="string">&#x27;xx&#x27;</span> </span><br></pre></td></tr></table></figure><pre><code>2.添加</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="使用列表的一部分"><a href="#使用列表的一部分" class="headerlink" title="使用列表的一部分"></a>使用列表的一部分</h2><pre><code>1.切片</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">items &#x3D; [&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;]</span><br><span class="line">my_favorite &#x3D; items[0:3]</span><br><span class="line">print(my_favorite)</span><br></pre></td></tr></table></figure><pre><code>2</code></pre><h2 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Markdown&quot;&gt;&lt;a href=&quot;#Markdown&quot; class=&quot;headerlink&quot; title=&quot;Markdown&quot;&gt;&lt;/a&gt;Markdown&lt;/h2&gt;&lt;p&gt;  Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Sql注入</title>
    <link href="http://example.com/2021/04/20/Sql%E6%B3%A8%E5%85%A5/"/>
    <id>http://example.com/2021/04/20/Sql%E6%B3%A8%E5%85%A5/</id>
    <published>2021-04-19T16:00:00.000Z</published>
    <updated>2021-04-24T07:01:13.580Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Sql注入"><a href="#Sql注入" class="headerlink" title="Sql注入"></a>Sql注入</h1><p><strong>原理：SQL注入漏洞主要形成的原因是在数据交互中，前端的数据传入到后台处理时，没有做严格的判断，导致其传入的“数据”拼接到SQL语句中后，被当作SQL语句的一部分执行。</strong></p><h2 id="一-判断Sql注入点"><a href="#一-判断Sql注入点" class="headerlink" title="一.判断Sql注入点"></a>一.判断Sql注入点</h2><p>通常情况下，可能存在 Sql 注入漏洞的 Url 是类似这种形式 ：<code>http://xxx.xxx.xxx/abcd.php?id=XX</code></p><h3 id="（1）判断是否存在Sql注入漏洞"><a href="#（1）判断是否存在Sql注入漏洞" class="headerlink" title="（1）判断是否存在Sql注入漏洞"></a>（1）判断是否存在Sql注入漏洞</h3><h4 id="1）单引号判断法"><a href="#1）单引号判断法" class="headerlink" title="1）单引号判断法"></a>1）单引号判断法</h4><p>在参数后面加上单引号</p><p><code>http://xxx/abc.php?id=1&#39;</code></p><h4 id="2-数字型Sql-注入漏洞判断"><a href="#2-数字型Sql-注入漏洞判断" class="headerlink" title="2)数字型Sql 注入漏洞判断"></a>2)数字型Sql 注入漏洞判断</h4><p>当输入的参 x 为整型时，通常 abc.php 中 Sql 语句类型大致如下： <code>select * from &lt;表名&gt; where id = x</code> ,可以使用 <code>and 1=1</code> 和 <code>and 1=2</code> 来判断：</p><ol><li><p>Url 地址中输入 <code>http://xxx/abc.php?id= x and 1=1</code> 页面依旧运行正常，继续进行下一步。</p><p>此步执行的语句为：select * from &lt;表名&gt; where id = x and 1=1</p><p>返回正常</p></li><li><p>Url 地址中继续输入 <code>http://xxx/abc.php?id= x and 1=2</code> 页面运行错误，则说明此 Sql 注入为数字型注入。</p><p>此步执行的语句为：select * from &lt;表名&gt; where id = x and 1=2</p><p>逻辑判断为假，返回错误</p></li></ol><h4 id="3-字符型Sql-注入漏洞判断"><a href="#3-字符型Sql-注入漏洞判断" class="headerlink" title="3)字符型Sql 注入漏洞判断"></a>3)字符型Sql 注入漏洞判断</h4><p>当输入的参 x 为字符型时，通常SQL语句类型大致如下： <code>select * from &lt;表名&gt; where id = &#39;x&#39;</code> ，使用 <code>and &#39;1&#39;=&#39;1</code> 和 <code>and &#39;1&#39;=&#39;2</code>来判断：</p><ol><li><p>Url 地址中输入 <code>http://xxx/abc.php?id= x&#39; and &#39;1&#39;=&#39;1</code> 页面运行正常，继续进行下一步。</p></li><li><p>Url 地址中继续输入 <code>http://xxx/abc.php?id= x&#39; and &#39;1&#39;=&#39;2</code> 页面运行错误，则说明此 Sql 注入为字符型注入。</p></li></ol><h3 id="（2）一些实用函数"><a href="#（2）一些实用函数" class="headerlink" title="（2）一些实用函数"></a>（2）一些实用函数</h3><p>1）database()函数：返回目前所在（所使用）的数据库名</p><p>2）select函数：（用于从数据库中选取数据结果被存储在一个结果表中，称为结果集）可以输出该函数的返回值（数据库名）</p><p>2）group_concat()函数：能够将多行记录进行连接并且使用逗号进行分割</p><h3 id="（3）联合注入"><a href="#（3）联合注入" class="headerlink" title="（3）联合注入"></a>（3）联合注入</h3><p>模板：</p><p><code>union select (被查询列名) from (表名) where (指定列名=xx)</code></p><p>其中where语句可以省略，并且后方需要加上注释符号’#’</p><p>注意：<strong>被查询列名的数量必须与union前的主查询语句中的被查询列名的数量一致，不够的用1进行补齐</strong></p><p>因此需要使用<code>order by</code>语句确定主查询语句中查询对象的数量</p><p>使用方式：在原查询语句构造闭合之后，加上：<code>order by x</code>  并且将后方进行注释，x从1开始，意为对第x列进行排序，当x增加到大于主查询语句中所查询的列的数量时，便会报错 Unknown column ‘x’ in ‘order clause’ 此时便可以确定原查询语句中查询对象的数量</p><h3 id="4）报错注入"><a href="#4）报错注入" class="headerlink" title="(4）报错注入"></a>(4）报错注入</h3><p>正常用户访问服务器发送id信息返回正确的id数据。报错注入是想办法构造语句，让错误信息中可以显示数据库的内容，如果能让错误信息中返回数据库中的内容，即实现SQL注入</p><h4 id="1）基于updatexml-函数的注入"><a href="#1）基于updatexml-函数的注入" class="headerlink" title="1）基于updatexml()函数的注入"></a>1）基于updatexml()函数的注入</h4><p>函数的作用是：改变（查找并替换）XML文档中符合条件的节点的值，其中包含三个参数：</p><p><code>updatexml(xml_document,XPathstring,new_value)</code></p><p>第一个参数：fiedname是String格式，为表中的字段名</p><p>第二个参数：XPathstring（XPath格式的字符串）</p><p>第三个参数：new_value（用于替换查找到的符合条件的节点的值）</p><p>其中XPath定位必须是有效的，否则会发生报错，于是我们可以在第二个参数之中填入所需的语句，后台将对该语句进行解析并把运行结果返回在报错信息中，这就是报错注入。</p><p><a href="https://blog.csdn.net/yujia_666/article/details/90296495">参考资料1</a></p><p><a href="https://www.cnblogs.com/qq3285862072/p/9439573.html">参考资料2</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Sql注入&quot;&gt;&lt;a href=&quot;#Sql注入&quot; class=&quot;headerlink&quot; title=&quot;Sql注入&quot;&gt;&lt;/a&gt;Sql注入&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;原理：SQL注入漏洞主要形成的原因是在数据交互中，前端的数据传入到后台处理时，没有做严格的判断，导致</summary>
      
    
    
    
    
  </entry>
  
</feed>
